@using Telerik.Blazor.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedSessionStorage ProtectedSessionStorage
@inject NavigationManager NavigationManager

@page "/TicTacToe"
@layout EmptyLayout

<style>
    .header {
        background-color: black; /* Background color for the header */
        color: white; /* Text color */
        height: 120px; /* Smaller header height */
        display: flex; /* Use flexbox for layout */
        align-items: center; /* Center items vertically */
        justify-content: space-between; /* Space items evenly horizontally */
        padding: 0 20px; /* Padding for the header */
    }

    /* Title style */
    .title {
        font-size: 20px; /* Adjust the font size as needed */
        font-weight: bold; /* Make the title bold */
    }

    /* Left div style */
    .left-div {
        display: flex; /* Use flexbox for layout */
        align-items: center; /* Center items vertically */
    }

    /* Middle divs style */
    .middle-div {
        display: flex; /* Use flexbox for layout */
        align-items: center; /* Center items vertically */
    }

    /* Middle div items style */
    .middle-div-item {
        margin: 0 10px; /* Adjust the margin as needed */
    }

    /* Right div style */
    .right-div {
        display: flex; /* Use flexbox for layout */
        align-items: center; /* Center items vertically */
    }

    /* Style for the icons */
    .signin {
        font-size: 24px; /* Adjust the icon size as needed */
        margin-right: 5px; /* Adjust the spacing between icon and text */
    }


    body {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
    }

    .content {
        /* Style your page content container, e.g., background, padding, etc. */
        padding: 20px;
    }


    body {
        line-height: 1.5;
        font-family: 'Poppins', sans-serif;
        background-color: black;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .container {
        max-width: 1170px;
        margin: auto;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
    }

    ul {
        list-style: none;
    }

    .footer {
        background-color: black;
        padding: 70px 0;
    }

    .footer-col {
        width: 25%;
        padding: 0 15px;
    }

        .footer-col h4 {
            font-size: 18px;
            color: #ffffff;
            text-transform: capitalize;
            margin-bottom: 35px;
            font-weight: 500;
            position: relative;
        }

            .footer-col h4::before {
                content: '';
                position: absolute;
                left: 0;
                bottom: -10px;
                background-color: white;
                height: 2px;
                box-sizing: border-box;
                width: 50px;
            }

        .footer-col ul li:not(:last-child) {
            margin-bottom: 10px;
        }

        .footer-col ul li a {
            font-size: 16px;
            text-transform: capitalize;
            color: #ffffff;
            text-decoration: none;
            font-weight: 300;
            color: #bbbbbb;
            display: block;
            transition: all 0.3s ease;
        }

            .footer-col ul li a:hover {
                color: #ffffff;
                padding-left: 8px;
            }

        .footer-col .social-links a {
            display: inline-block;
            height: 40px;
            width: 40px;
            background-color: rgba(255,255,255,0.2);
            margin: 0 10px 10px 0;
            text-align: center;
            line-height: 40px;
            border-radius: 50%;
            color: #ffffff;
            transition: all 0.5s ease;
        }

            .footer-col .social-links a:hover {
                color: #24262b;
                background-color: #ffffff;
            }



    /* page styling */
    body {
        background: linear-gradient(180deg,black, silver);
    }

    section {
        max-width: 900px;
        margin: 0 auto;
    }

        section h1 {
            font-size: 46px;
            text-align: center;
        }

        section p {
            font-size: 26px;
            text-align: center;
        }

    /* hamburger */
    .checkbox {
        display: none;
    }

    .button {
        position: relative;
        background-color: white;
        height: 5rem;
        width: 5rem;
        border-radius: 50%;
        position: fixed;
        top: 50vh;
        right: 5vw;
        z-index: 2000;
        box-shadow: 0 1rem 3rem black;
        text-align: center;
        cursor: pointer;
    }

    .background {
        height: 4rem;
        width: 4rem;
        border-radius: 50%;
        position: fixed;
        top: 50.5vh;
        right: 5.5vw;
        background-image: radial-gradient(black, silver);
        z-index: 1000;
        transition: transform 0.8s cubic-bezier(0.86, 0, 0.07, 1);
    }

    .nav {
        height: 100vh;
        position: fixed;
        top: 0;
        right: -60vw;
        z-index: 1500;
        opacity: 0;
        width: 0;
        transition: all 0.8s;
    }

    .list {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        list-style: none;
        text-align: center;
        width: 100%;
    }

    .item {
        margin: 1rem;
        font-size: 36px;
    }

    .link:link,
    .link:visited {
        display: inline-block;
        font-size: 3rem;
        font-weight: 300;
        padding: 1rem 2rem;
        color: white;
        text-decoration: none;
        text-transform: uppercase;
        background-image: linear-gradient( 120deg, transparent 0%, transparent 50%, white 50% );
        background-size: 220%;
        transition: all 0.4s;
    }

    .link:hover,
    .link:active {
        color: white;
        cursor: pointer;
    }

    /* functionality */
    .checkbox:checked ~ .background {
        transform: scale(80);
    }

    .checkbox:checked ~ .nav {
        opacity: 1;
        width: 100%;
        right: 0;
    }

    /*  */
    /* styling hamb ICON */
    .icon {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

        .icon,
        .icon::before,
        .icon::after {
            width: 3rem;
            height: 2px;
            background-color: gray;
            display: inline-block;
        }

            .icon::before,
            .icon::after {
                content: "";
                position: absolute;
                left: 0;
                transition: all 0.2s;
            }

            .icon::before {
                top: -0.8rem;
            }

            .icon::after {
                top: 0.8rem;
            }

    .button:hover icon:before {
        top: -1rem;
    }

    .button:hover icon::after {
        top: 1rem;
    }

    .checkbox:checked + .button .icon {
        background-color: transparent;
    }

        .checkbox:checked + .button .icon::before {
            top: 0;
            transform: rotate(135deg);
        }

        .checkbox:checked + .button .icon::after {
            top: 0;
            transform: rotate(-135deg);
        }
    /*
                            body {
                                font-family: 'Arial', sans-serif;
                                display: flex;
                                justify-content: center;
                                align-items: center;
                                height: 100vh;
                                margin: 0;
                            } */

    #ticTacToeBoard {
        display: grid;
        grid-template-columns: repeat(3, 100px);
        grid-gap: 5px;
    }

    .cell {
        width: 100px;
        height: 100px;
        border: 1px solid #ccc;
        font-size: 2em;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

        .cell:hover {
            background-color: #f0f0f0;
        }

    .cell2 {
        width: 50px;
        height: 50px;
        border: 1px solid #ccc;
        font-size: 2em;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

        .cell2:hover {
            background-color: #f0f0f0;
        }

    .containertictac {
        display: flex; /* Use flexbox layout */
        margin-top: 30px;
    }

        .containertictac > div {
        }

    /* Style for the first div */
    .div1 {
        flex: 1; /* Take up available space */
        padding-left: 40px;
    }

    /* Style for the second div */
    .div2 {
    }

</style>

<!DOCTYPE html>
<html>
<body>
    <div class="header">
        <div class="title" @onclick="ReturnHome" style="cursor: pointer;">
            <img src="Images/I-Image.png" style="width: 80px; height: 80px;">
            Innovative Software Solutions
        </div>
        <div class="middle-div">
            <div class="middle-div-item" style="cursor: pointer" @onclick="btnAboutUs">About Us</div> <!-- Replace with your content -->
            <div class="middle-div-item" style="cursor: pointer" @onclick="btnContactUs">Contact Us</div> <!-- Replace with your content -->
            <div class="middle-div-item" style="cursor: pointer">Services</div> <!-- Replace with your content -->
            <div class="middle-div-item" style="cursor: pointer" @onclick="btnIndustries">Industries</div> <!-- Replace with your content -->
        </div>
        <div class="right-div">
            <div style="cursor: pointer; text-decoration: underline;" @onclick="SignInBtn" class="signin">Sign In</div> <!-- Replace 'Icon2' with your actual icon or content -->
        </div>
    </div>
</body>
</html>

<div class="containertictac" style="margin-left: 25%; margin-top: 200px; margin-bottom: 200px;">
    <div style="margin-left: 200px;">
        <label style="color: white" for="Player1">Player 1</label>
        <TelerikCheckBox OnChange="PlayerCheck1" Class="cell2" Id="Player1" @bind-Value="@Selections.Player1" />
        <label style="color: white" for="Player2">Player 2</label>
        <TelerikCheckBox OnChange="PlayerCheck2" Class="cell2" Id="Player2" @bind-Value="@Selections.Player2" />
        <label style="color: white" for="Clear">Clear Board</label>
        <TelerikButton Class="cell2" Id="Clear" OnClick="ClearGrid" />
        <label style="color: white" for="RestartGame">Restart Game</label>
        <TelerikButton Class="cell2" Id="RestartGame" OnClick="ResetGame" />
    </div>
    <div style="margin-left: 50px;">
        <div id="ticTacToeBoard">
            <TelerikCheckBox Class="cell" OnChange="CheckForWinner" Id="one" @bind-Value="@Selections.one" />
            <TelerikCheckBox Class="cell" OnChange="CheckForWinner" Id="two" @bind-Value="@Selections.two" />
            <TelerikCheckBox Class="cell" OnChange="CheckForWinner" Id="three" @bind-Value="@Selections.three" />
            <TelerikCheckBox Class="cell" OnChange="CheckForWinner" Id="four" @bind-Value="@Selections.four" />
            <TelerikCheckBox Class="cell" OnChange="CheckForWinner" Id="five" @bind-Value="@Selections.five" />
            <TelerikCheckBox Class="cell" OnChange="CheckForWinner" Id="six" @bind-Value="Selections.six" />
            <TelerikCheckBox Class="cell" OnChange="CheckForWinner" Id="seven" @bind-Value="@Selections.seven" />
            <TelerikCheckBox Class="cell" OnChange="CheckForWinner" Id="eight" @bind-Value="@Selections.eight" />
            <TelerikCheckBox Class="cell" OnChange="CheckForWinner" Id="nine" @bind-Value="@Selections.nine" />
        </div>
    </div>
</div>

<div style="font-size: 50px;">
    @if (Selections.Player1Win)
    {
        <b>Player One Wins!</b>
    }
    @if (Selections.Player2Win)
    {
        <b>Player Two Wins!</b>
    }
</div>







@* <div id="ticTacToeBoard" style="margin-left: 44%; margin-top: 70px; margin-bottom: 70px;">
    <TelerikCheckBox Class="cell"></TelerikCheckBox>
</div> *@

<script>
    const cells = document.querySelectorAll('.cell');
    let currentPlayer = 1;

    cells.forEach(cell => {
        cell.addEventListener('click', () => handleCellClick(cell));
    });

    function handleCellClick(clickedCell) {
        if (!clickedCell.classList.contains('player1') && !clickedCell.classList.contains('player2')) {
            // Toggle the class based on the current player
            currentPlayer === 1 ? clickedCell.classList.add('player1') : clickedCell.classList.add('player2');

            // Switch to the next player
            currentPlayer = currentPlayer === 1 ? 2 : 1;
        }
    }
</script>

<!-- hamburger -->
<input type="checkbox" id="navi-toggle" class="checkbox" />
<label for="navi-toggle" class="button">
    <span class="icon">&nbsp;</span>
</label>
<div class="background">&nbsp;</div>

<!-- nav -->
<nav class="nav">
    <div class="list">
        <div class="item" @onclick="ReturnHome"> <a class="link"> Home </a> </div>
        <div class="item" @onclick="btnAboutUs"> <a class="link"> About Us </a> </div>
        <div class="item" @onclick="btnContactUs"> <a class="link"> Contact Us </a> </div>
        <div class="item"> <a class="link"> Services </a> </div>
        <div class="item" @onclick="btnIndustries"> <a class="link"> Industries </a> </div>
    </div>
</nav>

<br />
<br />
<br />
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Footer Design</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
</head>
<body>

    <footer class="footer">
        <div class="container">
            <div class="row">
                <div class="footer-col">
                    <h4>company</h4>
                    <ul>
                        <li><a href="#">about us</a></li>
                        <li><a href="#">our services</a></li>
                        <li><a href="#">privacy policy</a></li>
                        <li><a href="#">affiliate program</a></li>
                    </ul>
                </div>
                <div class="footer-col">
                    <h4>get help</h4>
                    <ul>
                        <li><a href="#">FAQ</a></li>
                        <li><a href="#">shipping</a></li>
                        <li><a href="#">returns</a></li>
                        <li><a href="#">order status</a></li>
                        <li><a href="#">payment options</a></li>
                    </ul>
                </div>
                <div class="footer-col">
                    <h4>online shop</h4>
                    <ul>
                        <li><a href="#">watch</a></li>
                        <li><a href="#">bag</a></li>
                        <li><a href="#">shoes</a></li>
                        <li><a href="#">dress</a></li>
                    </ul>
                </div>
                <div class="footer-col">
                    <h4>follow us</h4>
                    <div class="social-links">
                        <a href="#"><i class="fab fa-facebook-f"></i></a>
                        <a href="#"><i class="fab fa-twitter"></i></a>
                        <a href="#"><i class="fab fa-instagram"></i></a>
                        <a href="#"><i class="fab fa-linkedin-in"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </footer>

</body>
</html>

@code {
    List<bool> Player1Selection { get; set; } = new List<bool>();
    List<bool> Player2Selection { get; set; } = new List<bool>();
    List<string> Player2SelectionNames { get; set; } = new List<string>();
    List<string> Player1SelectionNames { get; set; } = new List<string>();

    Variables Selections { get; set; } = new Variables();


    public class Variables
    {
        public bool one { get; set; }
        public bool two { get; set; }
        public bool three { get; set; }
        public bool four { get; set; }
        public bool five { get; set; }
        public bool six { get; set; }
        public bool seven { get; set; }
        public bool eight { get; set; }
        public bool nine { get; set; }
        public bool Player1 { get; set; }
        public bool Player2 { get; set; }
        public bool Player1Win { get; set; }
        public bool Player2Win { get; set; }
    }



    public void SignInBtn()
    {
        NavigationManager.NavigateTo("SignInPage");
    }
    public void ClearGrid()
    {
        Selections.one = false;
        Selections.two = false;
        Selections.three = false;
        Selections.four = false;
        Selections.five = false;
        Selections.six = false;
        Selections.seven = false;
        Selections.eight = false;
        Selections.nine = false;
        Selections.Player1 = false;
        Selections.Player2 = false;
        // NavigationManager.NavigateTo("TicTacToe", true);
    }

    public void ResetGame()
    {
        Selections.one = false;
        Selections.two = false;
        Selections.three = false;
        Selections.four = false;
        Selections.five = false;
        Selections.six = false;
        Selections.seven = false;
        Selections.eight = false;
        Selections.nine = false;
        Selections.Player1 = false;
        Selections.Player2 = false;
        NavigationManager.NavigateTo("TicTacToe", true);
    }

    public void CheckForWinner()
    {
        if (Selections.Player1)
        {
            Type type = typeof(Variables);
            foreach (var property in type.GetProperties())
            {
                if (property.PropertyType == typeof(bool))
                {
                    bool value = (bool)property.GetValue(Selections);
                    string name = (string)property.Name;
                    if (value)
                    {
                        Player1Selection.Add(value);
                        Player1SelectionNames.Add(name);
                    }
                }
            }
            //     StateHasChanged();
            //     Player1Selection = new List<bool>();
            //     if (Selections.one)
            //     {
            //         Player1Selection.Add(Selections.one);
            //     }
            //     if (Selections.two)
            //     {
            //         Player1Selection.Add(Selections.two);
            //     }
            //     if (Selections.three)
            //     {
            //         Player1Selection.Add(Selections.three);
            //     }
            //     if (Selections.four)
            //     {
            //         Player1Selection.Add(Selections.four);
            //     }
            //     if (Selections.five)
            //     {
            //         Player1Selection.Add(Selections.five);
            //     }
            //     if (Selections.six)
            //     {
            //         Player1Selection.Add(Selections.six);
            //     }
            //     if (Selections.seven)
            //     {
            //         Player1Selection.Add(Selections.seven);
            //     }
            //     if (Selections.eight)
            //     {
            //         Player1Selection.Add(Selections.eight);
            //     }
            //     if (Selections.nine)
            //     {
            //         Player1Selection.Add(Selections.nine);
            //     }
        }
        if (Selections.Player2)
        {
            Type type = typeof(Variables);
            foreach (var property in type.GetProperties())
            {
                if (property.PropertyType == typeof(bool))
                {
                    bool value = (bool)property.GetValue(Selections);
                    string name = (string)property.Name;
                    if (value)
                    {
                        Player2Selection.Add(value);
                        Player2SelectionNames.Add(name);
                    }
                }
            }
            // StateHasChanged();
            // Player2Selection = new List<bool>();
            // if (Selections.one)
            // {
            //     Player2Selection.Add(Selections.one);
            // }
            // if (Selections.two)
            // {
            //     Player2Selection.Add(Selections.two);
            // }
            // if (Selections.three)
            // {
            //     Player2Selection.Add(Selections.three);
            // }
            // if (Selections.four)
            // {
            //     Player2Selection.Add(Selections.four);
            // }
            // if (Selections.five)
            // {
            //     Player2Selection.Add(Selections.five);
            // }
            // if (Selections.six)
            // {
            //     Player2Selection.Add(Selections.six);
            // }
            // if (Selections.seven)
            // {
            //     Player2Selection.Add(Selections.seven);
            // }
            // if (Selections.eight)
            // {
            //     Player2Selection.Add(Selections.eight);
            // }
            // if (Selections.nine)
            // {
            //     Player2Selection.Add(Selections.nine);
            // }
        }
        CheckForThreeInARow();
        if (Selections.Player1Win)
        {
            //state who won in ui
            ClearGrid();
            StateHasChanged();
        }
        if (Selections.Player2Win)
        {
            //state who won in ui
            ClearGrid();
            StateHasChanged();
        }
    }

    public bool CheckForThreeInARow()
    {
        Selections.Player1Win = false;
        Selections.Player2Win = false;
        if (Selections.Player1)
        {
            if (Player1SelectionNames.Contains("one") && Player1SelectionNames.Contains("two") && Player1SelectionNames.Contains("three"))
            {
                Selections.Player2Win = true;
            }
            if (Player1SelectionNames.Contains("four") && Player1SelectionNames.Contains("five") && Player1SelectionNames.Contains("six"))
            {
                Selections.Player2Win = true;
            }
            if (Player1SelectionNames.Contains("seven") && Player1SelectionNames.Contains("eight") && Player1SelectionNames.Contains("nine"))
            {
                Selections.Player2Win = true;
            }
            if (Player1SelectionNames.Contains("one") && Player1SelectionNames.Contains("four") && Player1SelectionNames.Contains("seven"))
            {
                Selections.Player2Win = true;
            }
            if (Player1SelectionNames.Contains("two") && Player1SelectionNames.Contains("five") && Player1SelectionNames.Contains("eight"))
            {
                Selections.Player2Win = true;
            }
            if (Player1SelectionNames.Contains("three") && Player1SelectionNames.Contains("six") && Player1SelectionNames.Contains("nine"))
            {
                Selections.Player2Win = true;
            }
            if (Player1SelectionNames.Contains("one") && Player1SelectionNames.Contains("five") && Player1SelectionNames.Contains("nine"))
            {
                Selections.Player2Win = true;
            }
            if (Player1SelectionNames.Contains("three") && Player1SelectionNames.Contains("five") && Player1SelectionNames.Contains("seven"))
            {
                Selections.Player2Win = true;
            }
        }
        if (Selections.Player2)
        {
            if (Player2SelectionNames.Contains("one") && Player2SelectionNames.Contains("two") && Player2SelectionNames.Contains("three"))
            {
                Selections.Player2Win = true;
            }
            if (Player2SelectionNames.Contains("four") && Player2SelectionNames.Contains("five") && Player2SelectionNames.Contains("six"))
            {
                Selections.Player2Win = true;
            }
            if (Player2SelectionNames.Contains("seven") && Player2SelectionNames.Contains("eight") && Player2SelectionNames.Contains("nine"))
            {
                Selections.Player2Win = true;
            }
            if (Player2SelectionNames.Contains("one") && Player2SelectionNames.Contains("four") && Player2SelectionNames.Contains("seven"))
            {
                Selections.Player2Win = true;
            }
            if (Player2SelectionNames.Contains("two") && Player2SelectionNames.Contains("five") && Player2SelectionNames.Contains("eight"))
            {
                Selections.Player2Win = true;
            }
            if (Player2SelectionNames.Contains("three") && Player2SelectionNames.Contains("six") && Player2SelectionNames.Contains("nine"))
            {
                Selections.Player2Win = true;
            }
            if (Player2SelectionNames.Contains("one") && Player2SelectionNames.Contains("five") && Player2SelectionNames.Contains("nine"))
            {
                Selections.Player2Win = true;
            }
            if (Player2SelectionNames.Contains("three") && Player2SelectionNames.Contains("five") && Player2SelectionNames.Contains("seven"))
            {
                Selections.Player2Win = true;
            }
        }
        return Selections.Player1Win;
        return Selections.Player2Win;
    }

    public void PlayerCheck1()
    {
        if (Selections.Player1)
        {
            Selections.Player2 = false;
        }
    }
    public void PlayerCheck2()
    {
        if (Selections.Player2)
        {
            Selections.Player1 = false;
        }
    }

    public void btnContactUs()
    {
        NavigationManager.NavigateTo("ContactUs");

    }

    public void btnTicTacToe()
    {
        NavigationManager.NavigateTo("TicTacToe");

    }

    public void ReturnHome()
    {
        NavigationManager.NavigateTo("LandingPage");
    }

    public void btnAboutUs()
    {
        NavigationManager.NavigateTo("AboutUs");

    }
    public void btnIndustries()
    {
        NavigationManager.NavigateTo("Industries");
    }
}